{"version":3,"sources":["Tile.js","Board.js","Timer.js","Counter.js","Button.js","TopPanel.js","App.js","serviceWorker.js","index.js"],"names":["Tile","isGameActive","event","_this","props","complete","selectedTile","_this2","this","_this$props","id","index","tilePosition","react_default","a","createElement","style","gridArea","slot","className","onClick","Component","Board","tiles","alert","tilesID","Object","keys","concat","undefined","map","tile","i","src_Tile","key","x","y","Timer","state","isTimeRunning","elapsedTime","previousTime","timerControl","now","Date","setState","prevState","timerStart","timerStop","timerReset","tick","isGameStarted","intervalID","setInterval","clearInterval","seconds","Math","floor","Counter","counter","Button","resetGame","TopPanel","src_Timer","src_Counter","src_Button","TILES","SLOTS","App","emptySlot","shuffle","array","newArr","toConsumableArray","currentIndex","length","temporaryValue","index1","random","index2","createObject","randomArray","reduce","obj","item","isGameComplete","intermediateTile","step","coordinate1","coordinate2","filter","mediumTile","mediumTile1","tileID","target","newObj","objectSpread","abs","componentWillMount","completeGame","src_TopPanel","src_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.233df017.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Tile extends Component {\n\n  /*Control the click event on each tile\n  **Execute the selectTile method only if this.props.complete === false\n  */\n  isGameActive = (event) => {\n    if (!this.props.complete) {\n      this.props.selectedTile(event);\n    }\n  }\n\n  render() {\n    const {id, index, tilePosition} = this.props;\n    return(\n      <div\n        id={id}\n        style={{gridArea: tilePosition.slot}}\n        className=\"tile\"\n        onClick={(event) =>this.isGameActive(event)}\n      >\n        {index}\n      </div>\n    );\n  }\n}\n\nTile.propTypes = {\n  id: PropTypes.string,\n  index: PropTypes.number,\n  tilePosition: PropTypes.object\n}\n\nexport default Tile;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Tile from './Tile.js';\n\nclass Board extends Component {\n\n\n  render() {\n    const {tiles,\n          selectedTile,\n          alert,\n          complete} = this.props;\n    const tilesID = Object.keys(tiles);\n\n    return(\n      <div\n        id=\"board\"\n        className={`${alert ? \"alert\" : undefined} ${complete ? 'complete' : undefined}`}\n      >\n        {tilesID.map((tile, i) => <Tile\n                                    id={tile}\n                                    index={i + 1}\n                                    key={i + 1}\n                                    tilePosition={tiles[tile]}\n                                    selectedTile={selectedTile}\n                                    complete={complete}\n                                  />)}\n        {complete && <Tile\n                       id=\"t16\"\n                       index={16}\n                       tilePosition={{slot: 'sl16', x: 3, y: 3}}\n                       complete={complete}\n                      />}\n      </div>\n    );\n  }\n}\n\nBoard.propTypes = {\n  tiles: PropTypes.object,\n  selectedTile: PropTypes.func,\n  alert: PropTypes.bool,\n  complete: PropTypes.bool\n}\n\nexport default Board;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Timer extends Component {\n  state = {\n    isTimeRunning: false,\n    elapsedTime: 0,\n    previousTime: 0\n  }\n\n  //Start the execution of tick method each 100 ms\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 100);\n  }\n\n  //End the execution of setInterval when the component will be unmount\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  //Control the regular functioning of timer\n  timerControl = () => {\n    const now = Date.now();\n    this.setState(prevState => ({\n      previousTime: now,\n      elapsedTime: prevState.elapsedTime + (now - prevState.previousTime)\n    }));\n  }\n\n  //Start the timer\n  timerStart = () => {\n    this.setState(prevState => ({\n      isTimeRunning: true,\n      previousTime: Date.now()\n    }));\n  }\n\n  //Stop the timer\n  timerStop = () => {\n    this.setState(prevState => ({\n      isTimeRunning: false\n    }));\n  }\n\n  //Reset the timer to zero\n  timerReset = () => {\n    this.setState(prevState => ({\n      isTimeRunning: false,\n      elapsedTime: 0,\n      previousTime: 0\n    }));\n  }\n\n  tick = () => {\n       //Reset the timer to zero whenever the game restart\n    if ((!this.props.isGameStarted && !this.state.isTimeRunning && !this.props.complete) ||\n      //Reset the timer to zero during the game after pressing the reset button\n        (!this.props.isGameStarted && this.state.isTimeRunning && !this.props.complete)) {\n      this.timerReset();\n    }\n    //It's executed when isGameStarted === true\n    //timerStart set isTimeRunning = true so the next block (with timerControl) is executed\n    if (this.props.isGameStarted && !this.state.isTimeRunning && !this.props.complete) {\n      this.timerStart();\n    }\n    if (this.props.isGameStarted && this.state.isTimeRunning && !this.props.complete) {\n      this.timerControl();\n    }\n    //It's executed when the game is over\n    if (this.props.isGameStarted && this.state.isTimeRunning && this.props.complete) {\n      this.timerStop();\n    }\n  }\n\n  render() {\n\n    const seconds = Math.floor(this.state.elapsedTime / 1000);\n    const {complete} = this.props;\n\n    return(\n      <div\n        id=\"timer\"\n        className={`${'component'} ${complete ? 'complete' : undefined}`}>\n        <h2>TIMER</h2>\n        <div className=\"time\"><h3>{seconds} sec</h3></div>\n      </div>\n    );\n  }\n}\n\nTimer.propTypes = {\n  isGameStarted: PropTypes.bool,\n  complete: PropTypes.bool\n}\n\nexport default Timer;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Counter extends Component {\n  render() {\n    const {counter, complete} = this.props;\n\n    return (\n      <div\n        id=\"counter\"\n        className={`${'component'} ${complete ? 'complete' : undefined}`}>\n        <h2>COUNTER</h2>\n        <div className=\"value\">\n          <h3>{counter}</h3>\n        </div>\n      </div>\n    );\n  }\n}\n\nCounter.propTypes = {\n  counter: PropTypes.number,\n  complete: PropTypes.bool\n}\n\nexport default Counter;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Button extends Component {\n  render() {\n    return(\n      <button\n        onClick={() => this.props.resetGame()}\n      >Reset</button>\n    );\n  }\n}\n\nButton.propTypes = {\n  resetGame: PropTypes.func\n}\n\nexport default Button;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Timer from './Timer.js';\nimport Counter from './Counter.js';\nimport Button from './Button.js';\n\n\nclass TopPanel extends Component {\n  render() {\n    const {counter,\n           resetGame,\n           isGameStarted,\n           complete} = this.props;\n    return(\n      <div id=\"top-panel\">\n        <Timer\n          isGameStarted={isGameStarted}\n          complete={complete}\n        />\n        <Counter\n          counter={counter}\n          complete={complete}\n        />\n        <Button\n          resetGame={resetGame}\n        />\n      </div>\n    );\n  }\n}\n\nTopPanel.propTypes = {\n  counter: PropTypes.number,\n  resetGame: PropTypes.func,\n  isGameStarted: PropTypes.bool,\n  complete: PropTypes.bool\n}\n\nexport default TopPanel;\n","import React, { Component } from 'react';\nimport Board from './Board.js';\nimport TopPanel from './TopPanel.js';\n\n//Tiles' IDs\nconst TILES = ['t1', 't2', 't3', 't4', 't5', 't6', 't7', 't8',\n               't9', 't10', 't11', 't12', 't13', 't14', 't15'];\n\n//Slots' IDs and position in the grid\nconst SLOTS = [{slot: 'sl1', x: 0, y: 0},\n               {slot: 'sl2', x: 1, y: 0},\n               {slot: 'sl3', x: 2, y: 0},\n               {slot: 'sl4', x: 3, y: 0},\n               {slot: 'sl5', x: 0, y: 1},\n               {slot: 'sl6', x: 1, y: 1},\n               {slot: 'sl7', x: 2, y: 1},\n               {slot: 'sl8', x: 3, y: 1},\n               {slot: 'sl9', x: 0, y: 2},\n               {slot: 'sl10', x: 1, y: 2},\n               {slot: 'sl11', x: 2, y: 2},\n               {slot: 'sl12', x: 3, y: 2},\n               {slot: 'sl13', x: 0, y: 3},\n               {slot: 'sl14', x: 1, y: 3},\n               {slot: 'sl15', x: 2, y: 3}];\n\nclass App extends Component {\n  state = {\n    tiles: {},\n    emptySlot: {slot: 'sl16', x: 3, y: 3},\n    counter: 0,\n    alert: false,\n    isGameStarted: false\n  }\n\n  //Mix an array making an even number of items swap\n  //It takes an array as a single argument and return a new shuffled array\n  shuffle = (array) => {\n    let newArr = [...array];\n    let currentIndex = newArr.length;\n    let counter = 20;\n    let temporaryValue = undefined;\n\n    while (counter > 0) {\n      let index1 = Math.floor(Math.random() * currentIndex);\n      let index2 = Math.floor(Math.random() * currentIndex);\n\n      while (index1 === index2) {\n        index2 = Math.floor(Math.random() * currentIndex);\n      }\n\n      temporaryValue = newArr[index1];\n      newArr[index1] = newArr[index2];\n      newArr[index2] = temporaryValue;\n\n      counter -= 1;\n    }\n\n    return newArr;\n  }\n\n  //Return an object taking keys from an array and taking values from another array\n  createObject = () => {\n    let randomArray = this.shuffle(SLOTS);\n    let newObj = TILES.reduce((obj, item, i) => {\n      obj[item] = randomArray[i];\n      return obj;\n    }, {});\n    return newObj;\n  }\n\n  //Check if all the tiles are positioned in the correct order\n  isGameComplete = () => {\n    for (let i = 0; i < TILES.length; i++) {\n      let tile = TILES[i];\n      let slot = SLOTS[i].slot;\n      if (this.state.tiles[tile].slot !== slot) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  //Find tile next to the one selected by the user\n  //It takes 3 arguments: tile position (object), step (num) and coordinate1 (string)\n  intermediateTile = (tilePosition, step, coordinate1) => {\n    const tiles = this.state.tiles;\n    const coordinate2 = coordinate1 === \"x\" ? \"y\" : \"x\";\n    return Object.keys(tiles).filter(tile => {\n      return tiles[tile][coordinate1] === (tilePosition[coordinate1] + step) &&\n             tiles[tile][coordinate2] === tilePosition[coordinate2];\n    });\n  }\n\n  //Update the state based on the tile selected by the user\n  selectedTile = (event) => {\n    const tileID = event.target.id;\n    const tilePosition = this.state.tiles[tileID];\n    const emptySlot = this.state.emptySlot;\n    const newObj = {...this.state.tiles};\n    let mediumTile, mediumTile1;\n\n    if (tilePosition.x === emptySlot.x || tilePosition.y === emptySlot.y) {\n      //1-tile move\n      if ((Math.abs(tilePosition.x - emptySlot.x) === 1 || Math.abs(tilePosition.y - emptySlot.y) === 1)) {\n        newObj[tileID]= emptySlot;\n      }\n      //2-tiles move\n      if ((Math.abs(tilePosition.x - emptySlot.x) === 2 || Math.abs(tilePosition.y - emptySlot.y) === 2)) {\n\n        //Vertical 2-tiles move\n        if ((Math.abs(tilePosition.x - emptySlot.x) === 0 && Math.abs(tilePosition.y - emptySlot.y) === 2)) {\n          //From top to bottom if true or from bottom to top if false\n          mediumTile = (tilePosition.y < emptySlot.y) ? this.intermediateTile(tilePosition, 1, 'y') : this.intermediateTile(tilePosition, -1, 'y');\n          //Horizontal 2-tiles move\n        } else if ((Math.abs(tilePosition.y - emptySlot.y) === 0 && Math.abs(tilePosition.x - emptySlot.x) === 2)) {\n          //From left to right if true or from right to left\n          mediumTile = (tilePosition.x < emptySlot.x) ? this.intermediateTile(tilePosition, 1, 'x') : this.intermediateTile(tilePosition, -1, 'x');\n        }\n\n        newObj[tileID] = newObj[mediumTile];\n        newObj[mediumTile]= emptySlot;\n      }\n      //3-tiles move\n      if ((Math.abs(tilePosition.x - emptySlot.x) === 3 || Math.abs(tilePosition.y - emptySlot.y) === 3)) {\n        //Vertical 3-tiles move\n        if ((Math.abs(tilePosition.x - emptySlot.x) === 0 && Math.abs(tilePosition.y - emptySlot.y) === 3)) {\n          //From top to bottom if true or from bottom to top if false\n          mediumTile = (tilePosition.y < emptySlot.y) ? this.intermediateTile(tilePosition, 1, 'y') : this.intermediateTile(tilePosition, -1, 'y');\n          mediumTile1 = (tilePosition.y < emptySlot.y) ? this.intermediateTile(tilePosition, 2, 'y') : this.intermediateTile(tilePosition, -2, 'y');\n          //Horizontal 3-tiles move\n        } else if ((Math.abs(tilePosition.y - emptySlot.y) === 0 && Math.abs(tilePosition.x - emptySlot.x) === 3)) {\n          //From left to right if true or from right to left\n          mediumTile = (tilePosition.x < emptySlot.x) ? this.intermediateTile(tilePosition, 1, 'x') : this.intermediateTile(tilePosition, -1, 'x');\n          mediumTile1 = (tilePosition.x < emptySlot.x) ? this.intermediateTile(tilePosition, 2, 'x') : this.intermediateTile(tilePosition, -2, 'x');\n        }\n\n        newObj[tileID] = newObj[mediumTile];\n        newObj[mediumTile]= newObj[mediumTile1];\n        newObj[mediumTile1]= emptySlot;\n      }\n\n      this.setState( prevState => ({\n        tiles: newObj,\n        emptySlot: tilePosition,\n        counter: prevState.counter + 1,\n        alert: false,\n        isGameStarted: true\n      }));\n    } else {\n      this.setState(prevState => ({alert: true}));\n    }\n  }\n\n  //Reset the state\n  resetGame = () => {\n    const newObj = this.createObject();\n    this.setState(prevState => ({\n      tiles: newObj,\n      emptySlot: {slot: 'sl16', x: 3, y: 3},\n      counter: 0,\n      alert: false,\n      isGameStarted:false\n    }));\n  }\n\n  //Create the \"tiles\" object in the state before mounting the component\n  componentWillMount = () => {\n    this.setState({tiles: this.createObject()});\n  }\n\n  render() {\n    const completeGame = this.isGameComplete() ? true : false;\n    return (\n      <div id=\"app\">\n        <h1>The 15 Puzzle Challenge</h1>\n        <TopPanel\n          counter={this.state.counter}\n          resetGame={this.resetGame}\n          isGameStarted={this.state.isGameStarted}\n          complete={completeGame}\n        />\n        <Board\n          tiles= {this.state.tiles}\n          selectedTile={this.selectedTile}\n          alert={this.state.alert}\n          complete={completeGame}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}